package interfaces;

import java.util.ArrayList;

public class AutopilotModuleImplementation implements AutopilotModule {
	public void defineAirportParams(float length, float width) {
		this.airportLength = length;
		this.airportWidth = width;
	}
	
    public void defineAirport(float centerX, float centerZ, float centerToRunway0X, float centerToRunway0Z) {
    	Airport airport = new Airport(centerX, centerZ, centerToRunway0X, centerToRunway0Z);
    	this.airports.add(airport);
    }
    
    public void defineDrone(int airport, int gate, int pointingToRunway, AutopilotConfig config); 
        // airport and gate define the drone's initial location, pointingToRunway its initial orientation. The first drone that is defined is drone 0, etc.
    
    public void startTimeHasPassed(int drone, AutopilotInputs inputs); 
        // Allows the autopilots for all drones to run in parallel if desired. Called with drone = 0 through N - 1, in that order, if N drones have been defined.
    
    public AutopilotOutputs completeTimeHasPassed(int drone); 
        // Called with drone = 0 through N - 1, in that order, if N drones have been defined.
    
    public void deliverPackage(int fromAirport, int fromGate, int toAirport, int toGate); 
        // Informs the autopilot module of a new package delivery request generated by the testbed.
    
    public void simulationEnded();
    
    public float getAirportLength() {
    	return this.airportLength;
    }
    
    public float getAirportWidth() {
    	return this.airportWidth;
    }
    
    public Airport getAirport(int airport) {
    	return this.airports.get(airport);
    }
    
    public ArrayList<Airport> getAirports() {
    	return this.airports;
    }
    
    public Drone getDrone(int drone) {
    	return this.drones.get(drone);
    }
    
    public ArrayList<Drone> getDrones() {
    	return this.drones;
    }
    
    public float airportLength;
    public float airportWidth;
    public ArrayList<Airport> airports;
    public ArrayList<Drone> drones;
}
